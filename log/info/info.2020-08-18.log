2020-08-18 16:27:37 INFO  main com.intertek.demo.DemoApplication Starting DemoApplication on CCHNSHZL0211 with PID 28236 (D:\IdeaWorkspace\demo\target\classes started by barry.jt.huang in D:\IdeaWorkspace\demo)
2020-08-18 16:27:37 INFO  main com.intertek.demo.DemoApplication The following profiles are active: local
2020-08-18 16:27:39 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-08-18 16:27:39 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data repositories in DEFAULT mode.
2020-08-18 16:27:39 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 81ms. Found 0 repository interfaces.
2020-08-18 16:27:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:27:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$b04a50d2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:27:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:27:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:27:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$46bbe001] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:27:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'itsProperties' of type [com.intertek.demo.common.properties.ItsProperties$$EnhancerBySpringCGLIB$$a9ede541] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:27:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.intertek.demo.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$56ed5cbe] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:27:41 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:27:41 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.intertek.demo.common.configure.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$58af5742] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:27:41 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:27:41 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$84844c9b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:27:41 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:27:41 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:27:41 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource 动态数据源-检测到并开启了p6spy
2020-08-18 16:27:41 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-08-18 16:27:41 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-08-18 16:27:41 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource 初始共加载 1 个数据源
2020-08-18 16:27:41 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource 动态数据源-加载 base 成功
2020-08-18 16:27:41 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource 当前的默认数据源是单数据源，数据源名为 base
2020-08-18 16:27:41 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:27:41 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:27:41 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:27:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:27:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:27:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:27:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy113] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:27:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:27:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:27:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.intertek.demo.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:27:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.intertek.demo.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:27:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:27:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy118] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:27:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:27:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:27:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.intertek.demo.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:27:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.intertek.demo.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:27:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:27:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy122] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:27:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.intertek.demo.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:27:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.intertek.demo.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:27:43 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:27:43 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:27:43 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:27:43 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:27:44 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8089 (http)
2020-08-18 16:27:44 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8089"]
2020-08-18 16:27:44 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-08-18 16:27:44 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.24]
2020-08-18 16:27:44 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/demo] Initializing Spring embedded WebApplicationContext
2020-08-18 16:27:44 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 6738 ms
2020-08-18 16:27:45 INFO  main com.intertek.demo.common.xss.XssFilter ------------ xss filter init ------------
2020-08-18 16:27:46 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-08-18 16:27:47 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)]
2020-08-18 16:27:47 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-08-18 16:27:47 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'itsAsyncThreadPool'
2020-08-18 16:27:47 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-08-18 16:27:48 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-08-18 16:27:48 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-08-18 16:27:48 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.1 created.
2020-08-18 16:27:48 INFO  main org.quartz.simpl.RAMJobStore RAMJobStore initialized.
2020-08-18 16:27:48 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.1) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-08-18 16:27:48 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-08-18 16:27:48 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.1
2020-08-18 16:27:48 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@5602e540
2020-08-18 16:27:48 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-08-18 16:27:48 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-08-18 16:27:48 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-08-18 16:27:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-08-18 16:27:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-08-18 16:27:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: deleteLogssUsingGET_1
2020-08-18 16:27:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-08-18 16:27:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-08-18 16:27:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-08-18 16:27:49 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-08-18 16:27:49 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-08-18 16:27:49 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now
2020-08-18 16:27:49 INFO  main org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-08-18 16:27:49 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8089"]
2020-08-18 16:27:49 INFO  main org.apache.coyote.http11.Http11NioProtocol Pausing ProtocolHandler ["http-nio-8089"]
2020-08-18 16:27:49 INFO  main org.apache.catalina.core.StandardService Stopping service [Tomcat]
2020-08-18 16:27:49 INFO  main org.apache.catalina.util.LifecycleBase The stop() method was called on component [StandardServer[-1]] after stop() had already been called. The second call will be ignored.
2020-08-18 16:27:49 INFO  main org.apache.coyote.http11.Http11NioProtocol Stopping ProtocolHandler ["http-nio-8089"]
2020-08-18 16:27:49 INFO  main org.apache.coyote.http11.Http11NioProtocol Destroying ProtocolHandler ["http-nio-8089"]
2020-08-18 16:27:49 INFO  main org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-08-18 16:27:49 INFO  main org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-08-18 16:27:49 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-08-18 16:27:49 INFO  main org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-08-18 16:27:49 INFO  main org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-08-18 16:27:49 INFO  main org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-08-18 16:27:49 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'itsAsyncThreadPool'
2020-08-18 16:27:49 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource closing dynamicDatasource  ing....
2020-08-18 16:27:49 INFO  main com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-08-18 16:27:49 INFO  main com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-08-18 16:27:56 INFO  main com.intertek.demo.DemoApplication Starting DemoApplication on CCHNSHZL0211 with PID 26984 (D:\IdeaWorkspace\demo\target\classes started by barry.jt.huang in D:\IdeaWorkspace\demo)
2020-08-18 16:27:56 INFO  main com.intertek.demo.DemoApplication The following profiles are active: local
2020-08-18 16:27:59 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-08-18 16:27:59 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data repositories in DEFAULT mode.
2020-08-18 16:27:59 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 49ms. Found 0 repository interfaces.
2020-08-18 16:28:00 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:28:00 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$c4a5873e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:28:00 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:28:00 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:28:00 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$5b17166d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:28:00 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'itsProperties' of type [com.intertek.demo.common.properties.ItsProperties$$EnhancerBySpringCGLIB$$be491bad] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:28:00 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.intertek.demo.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$6b48932a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:28:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:28:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.intertek.demo.common.configure.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$6d0a8dae] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:28:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:28:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$98df8307] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:28:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:28:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:28:01 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource 动态数据源-检测到并开启了p6spy
2020-08-18 16:28:01 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-08-18 16:28:01 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-08-18 16:28:01 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource 初始共加载 1 个数据源
2020-08-18 16:28:01 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource 动态数据源-加载 base 成功
2020-08-18 16:28:01 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource 当前的默认数据源是单数据源，数据源名为 base
2020-08-18 16:28:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:28:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:28:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:28:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:28:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:28:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:28:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy113] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:28:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:28:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:28:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.intertek.demo.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:28:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.intertek.demo.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:28:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:28:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy118] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:28:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:28:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:28:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.intertek.demo.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:28:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.intertek.demo.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:28:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:28:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy122] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:28:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.intertek.demo.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:28:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.intertek.demo.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:28:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:28:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:28:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:28:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:28:04 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8089 (http)
2020-08-18 16:28:04 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8089"]
2020-08-18 16:28:04 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-08-18 16:28:04 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.24]
2020-08-18 16:28:05 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/demo] Initializing Spring embedded WebApplicationContext
2020-08-18 16:28:05 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 8019 ms
2020-08-18 16:28:05 INFO  main com.intertek.demo.common.xss.XssFilter ------------ xss filter init ------------
2020-08-18 16:28:07 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-08-18 16:28:07 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)]
2020-08-18 16:28:07 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-08-18 16:28:07 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'itsAsyncThreadPool'
2020-08-18 16:28:08 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-08-18 16:28:09 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-08-18 16:28:09 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-08-18 16:28:09 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.1 created.
2020-08-18 16:28:09 INFO  main org.quartz.simpl.RAMJobStore RAMJobStore initialized.
2020-08-18 16:28:09 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.1) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-08-18 16:28:09 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-08-18 16:28:09 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.1
2020-08-18 16:28:09 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@14993306
2020-08-18 16:28:09 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-08-18 16:28:09 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-08-18 16:28:10 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-08-18 16:28:10 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-08-18 16:28:10 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-08-18 16:28:10 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: deleteLogssUsingGET_1
2020-08-18 16:28:10 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-08-18 16:28:10 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-08-18 16:28:10 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-08-18 16:28:10 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-08-18 16:28:10 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-08-18 16:28:10 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now
2020-08-18 16:28:10 INFO  main org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-08-18 16:28:10 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8089"]
2020-08-18 16:28:10 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8089 (http) with context path '/demo'
2020-08-18 16:28:10 INFO  main com.intertek.demo.DemoApplication Started DemoApplication in 15.194 seconds (JVM running for 15.789)
2020-08-18 16:28:49 INFO  http-nio-8089-exec-1 org.apache.tomcat.util.http.parser.Cookie A cookie header was received [1596618278; Hm_lvt_8b02a318fde5831da10426656a43d03c=1596701463,1596780333] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-08-18 16:28:49 INFO  http-nio-8089-exec-2 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/demo] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-08-18 16:28:49 INFO  http-nio-8089-exec-2 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-08-18 16:28:49 INFO  http-nio-8089-exec-2 org.springframework.web.servlet.DispatcherServlet Completed initialization in 22 ms
2020-08-18 16:28:49 INFO  http-nio-8089-exec-2 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-08-18 16:28:52 INFO  http-nio-8089-exec-4 p6spy 2020-08-18 16:28:52 | 耗时 20 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-08-18 16:28:56 INFO  http-nio-8089-exec-9 com.intertek.demo.common.aspect.LimitAspect IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2020-08-18 16:28:56 INFO  http-nio-8089-exec-9 p6spy 2020-08-18 16:28:56 | 耗时 29 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.company_name_zh companyNameZh, u.company_name_en companyNameEn, u.company_address companyAddress, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-08-18 16:28:56 INFO  http-nio-8089-exec-9 p6spy 2020-08-18 16:28:56 | 耗时 16 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('admin', '2020-08-18T16:28:56.787+0800', '内网IP|0|0|内网IP|内网IP', '127.0.0.1', 'Windows 10', 'Chrome 84');
2020-08-18 16:28:56 INFO  http-nio-8089-exec-1 p6spy 2020-08-18 16:28:56 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin';
2020-08-18 16:28:56 INFO  http-nio-8089-exec-1 p6spy 2020-08-18 16:28:56 | 耗时 8 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'admin' AND m.perms IS NOT NULL AND m.perms <> '';
2020-08-18 16:28:56 INFO  http-nio-8089-exec-1 p6spy 2020-08-18 16:28:56 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.company_name_zh companyNameZh, u.company_name_en companyNameEn, u.company_address companyAddress, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-08-18 16:28:58 INFO  http-nio-8089-exec-1 p6spy 2020-08-18 16:28:58 | 耗时 23 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin') ORDER BY m.order_num;
2020-08-18 16:28:58 INFO  http-nio-8089-exec-2 p6spy 2020-08-18 16:28:58 | 耗时 9 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin';
2020-08-18 16:28:58 INFO  http-nio-8089-exec-2 p6spy 2020-08-18 16:28:58 | 耗时 6 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'admin' AND m.perms IS NOT NULL AND m.perms <> '';
2020-08-18 16:28:58 INFO  http-nio-8089-exec-8 p6spy 2020-08-18 16:28:58 | 耗时 4 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-08-18T16:28:58.825+0800' WHERE USERNAME = 'admin';
2020-08-18 16:28:58 INFO  http-nio-8089-exec-8 p6spy 2020-08-18 16:28:58 | 耗时 2 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-08-18 16:28:58 INFO  http-nio-8089-exec-8 p6spy 2020-08-18 16:28:58 | 耗时 3 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-08-18 16:28:58 INFO  http-nio-8089-exec-8 p6spy 2020-08-18 16:28:58 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-08-18 16:28:58 INFO  http-nio-8089-exec-8 p6spy 2020-08-18 16:28:58 | 耗时 3 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-08-18 16:28:58 INFO  http-nio-8089-exec-8 p6spy 2020-08-18 16:28:58 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'admin' GROUP BY days;
2020-08-18 16:29:13 INFO  http-nio-8089-exec-4 p6spy 2020-08-18 16:29:13 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-08-18 16:29:15 INFO  http-nio-8089-exec-9 com.intertek.demo.common.aspect.LimitAspect IP:127.0.0.1 第 2 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2020-08-18 16:29:15 INFO  http-nio-8089-exec-9 p6spy 2020-08-18 16:29:15 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.company_name_zh companyNameZh, u.company_name_en companyNameEn, u.company_address companyAddress, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-08-18 16:29:15 INFO  http-nio-8089-exec-9 p6spy 2020-08-18 16:29:15 | 耗时 1 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('admin', '2020-08-18T16:29:15.126+0800', '内网IP|0|0|内网IP|内网IP', '127.0.0.1', 'Windows 10', 'Chrome 84');
2020-08-18 16:29:15 INFO  http-nio-8089-exec-10 p6spy 2020-08-18 16:29:15 | 耗时 0 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin';
2020-08-18 16:29:15 INFO  http-nio-8089-exec-10 p6spy 2020-08-18 16:29:15 | 耗时 0 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'admin' AND m.perms IS NOT NULL AND m.perms <> '';
2020-08-18 16:29:15 INFO  http-nio-8089-exec-10 p6spy 2020-08-18 16:29:15 | 耗时 4 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.company_name_zh companyNameZh, u.company_name_en companyNameEn, u.company_address companyAddress, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-08-18 16:29:15 INFO  http-nio-8089-exec-7 p6spy 2020-08-18 16:29:15 | 耗时 9 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin') ORDER BY m.order_num;
2020-08-18 16:29:15 INFO  http-nio-8089-exec-6 p6spy 2020-08-18 16:29:15 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-08-18T16:29:15.473+0800' WHERE USERNAME = 'admin';
2020-08-18 16:29:15 INFO  http-nio-8089-exec-6 p6spy 2020-08-18 16:29:15 | 耗时 0 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-08-18 16:29:15 INFO  http-nio-8089-exec-6 p6spy 2020-08-18 16:29:15 | 耗时 0 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-08-18 16:29:15 INFO  http-nio-8089-exec-6 p6spy 2020-08-18 16:29:15 | 耗时 0 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-08-18 16:29:15 INFO  http-nio-8089-exec-6 p6spy 2020-08-18 16:29:15 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-08-18 16:29:15 INFO  http-nio-8089-exec-6 p6spy 2020-08-18 16:29:15 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'admin' GROUP BY days;
2020-08-18 16:29:16 INFO  http-nio-8089-exec-10 p6spy 2020-08-18 16:29:16 | 耗时 0 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-08-18 16:29:16 INFO  http-nio-8089-exec-9 p6spy 2020-08-18 16:29:16 | 耗时 8 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.company_name_zh companyNameZh, u.company_name_en companyNameEn, u.company_address companyAddress, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM (SELECT * FROM t_user tu WHERE tu.user_id) u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ) TOTAL;
2020-08-18 16:29:16 INFO  http-nio-8089-exec-9 p6spy 2020-08-18 16:29:16 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.company_name_zh companyNameZh, u.company_name_en companyNameEn, u.company_address companyAddress, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM (SELECT * FROM t_user tu WHERE tu.user_id) u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ORDER BY userId ASC LIMIT 0,10;
2020-08-18 16:29:18 INFO  http-nio-8089-exec-7 p6spy 2020-08-18 16:29:18 | 耗时 2 ms | SQL 语句：
SELECT MENU_ID, PARENT_ID, MENU_NAME, URL, PERMS, ICON, TYPE, ORDER_NUM, CREATE_ID, CREATE_TIME, MODIFY_ID, MODIFY_TIME FROM t_menu;
2020-08-18 16:29:18 INFO  http-nio-8089-exec-5 p6spy 2020-08-18 16:29:18 | 耗时 5 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT r.role_id roleId, r.role_name roleName, r.remark, r.create_time createTime, r.modify_time modifyTime, GROUP_CONCAT(rm.menu_id) menuIds FROM t_role r LEFT JOIN t_role_menu rm ON (r.role_id = rm.role_id) WHERE 1 = 1 GROUP BY r.role_id ) TOTAL;
2020-08-18 16:29:18 INFO  http-nio-8089-exec-5 p6spy 2020-08-18 16:29:18 | 耗时 3 ms | SQL 语句：
SELECT r.role_id roleId, r.role_name roleName, r.remark, r.create_time createTime, r.modify_time modifyTime, GROUP_CONCAT(rm.menu_id) menuIds FROM t_role r LEFT JOIN t_role_menu rm ON (r.role_id = rm.role_id) WHERE 1 = 1 GROUP BY r.role_id ORDER BY createTime DESC LIMIT 0,10;
2020-08-18 16:29:18 INFO  http-nio-8089-exec-8 p6spy 2020-08-18 16:29:18 | 耗时 0 ms | SQL 语句：
SELECT MENU_ID, PARENT_ID, MENU_NAME, URL, PERMS, ICON, TYPE, ORDER_NUM, CREATE_ID, CREATE_TIME, MODIFY_ID, MODIFY_TIME FROM t_menu;
2020-08-18 16:29:19 INFO  http-nio-8089-exec-4 p6spy 2020-08-18 16:29:19 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept ORDER BY ORDER_NUM ASC;
2020-08-18 16:29:21 INFO  http-nio-8089-exec-9 p6spy 2020-08-18 16:29:21 | 耗时 20 ms | SQL 语句：
SELECT COUNT(1) FROM t_log;
2020-08-18 16:29:21 INFO  http-nio-8089-exec-9 p6spy 2020-08-18 16:29:21 | 耗时 1 ms | SQL 语句：
SELECT ID, USERNAME, OPERATION, TIME, METHOD, PARAMS, IP, CREATE_TIME, LOCATION FROM t_log ORDER BY create_time DESC LIMIT 0,10;
2020-08-18 16:29:22 INFO  http-nio-8089-exec-5 p6spy 2020-08-18 16:29:22 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_login_log;
2020-08-18 16:29:22 INFO  http-nio-8089-exec-5 p6spy 2020-08-18 16:29:22 | 耗时 1 ms | SQL 语句：
SELECT ID, USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER FROM t_login_log ORDER BY login_time DESC LIMIT 0,10;
2020-08-18 16:29:26 INFO  http-nio-8089-exec-4 p6spy 2020-08-18 16:29:26 | 耗时 0 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin';
2020-08-18 16:29:26 INFO  http-nio-8089-exec-4 p6spy 2020-08-18 16:29:26 | 耗时 0 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'admin' AND m.perms IS NOT NULL AND m.perms <> '';
2020-08-18 16:29:26 INFO  http-nio-8089-exec-4 p6spy 2020-08-18 16:29:26 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.company_name_zh companyNameZh, u.company_name_en companyNameEn, u.company_address companyAddress, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-08-18 16:29:29 INFO  http-nio-8089-exec-5 p6spy 2020-08-18 16:29:29 | 耗时 5 ms | SQL 语句：
SELECT COUNT(1) FROM information_schema.TABLES WHERE TABLE_SCHEMA = 'cmr';
2020-08-18 16:29:29 INFO  http-nio-8089-exec-5 p6spy 2020-08-18 16:29:29 | 耗时 103 ms | SQL 语句：
SELECT CREATE_TIME createTime, UPDATE_TIME updateTime, TABLE_ROWS dataRows, TABLE_NAME name, TABLE_COMMENT remark FROM information_schema.TABLES WHERE TABLE_SCHEMA = 'cmr' ORDER BY createTime ASC LIMIT 0,10;
2020-08-18 16:29:30 INFO  http-nio-8089-exec-9 p6spy 2020-08-18 16:29:30 | 耗时 3 ms | SQL 语句：
SELECT ID, author, base_package, entity_package, mapper_package, mapper_xml_package, service_package, service_impl_package, controller_package, is_trim, trim_value FROM t_generator_config;
2020-08-18 16:29:39 INFO  http-nio-8089-exec-8 p6spy 2020-08-18 16:29:39 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.company_name_zh companyNameZh, u.company_name_en companyNameEn, u.company_address companyAddress, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM (SELECT * FROM t_user tu WHERE tu.user_id) u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ) TOTAL;
2020-08-18 16:29:39 INFO  http-nio-8089-exec-1 p6spy 2020-08-18 16:29:39 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-08-18 16:29:39 INFO  http-nio-8089-exec-8 p6spy 2020-08-18 16:29:39 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.company_name_zh companyNameZh, u.company_name_en companyNameEn, u.company_address companyAddress, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM (SELECT * FROM t_user tu WHERE tu.user_id) u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ORDER BY userId ASC LIMIT 0,10;
2020-08-18 16:36:58 INFO  main com.intertek.demo.DemoApplication Starting DemoApplication on CCHNSHZL0211 with PID 20060 (D:\IdeaWorkspace\demo\target\classes started by barry.jt.huang in D:\IdeaWorkspace\demo)
2020-08-18 16:36:58 INFO  main com.intertek.demo.DemoApplication The following profiles are active: local
2020-08-18 16:37:00 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-08-18 16:37:00 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data repositories in DEFAULT mode.
2020-08-18 16:37:00 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 41ms. Found 0 repository interfaces.
2020-08-18 16:37:00 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:37:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$3fc6d2d5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:37:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:37:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:37:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$d6386204] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:37:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'itsProperties' of type [com.intertek.demo.common.properties.ItsProperties$$EnhancerBySpringCGLIB$$396a6744] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:37:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.intertek.demo.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$e669dec1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:37:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:37:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.intertek.demo.common.configure.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$e82bd945] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:37:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:37:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$1400ce9e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:37:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:37:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:37:01 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource 动态数据源-检测到并开启了p6spy
2020-08-18 16:37:01 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-08-18 16:37:01 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-08-18 16:37:01 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource 初始共加载 1 个数据源
2020-08-18 16:37:01 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource 动态数据源-加载 base 成功
2020-08-18 16:37:01 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource 当前的默认数据源是单数据源，数据源名为 base
2020-08-18 16:37:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:37:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:37:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:37:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:37:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:37:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:37:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy113] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:37:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:37:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:37:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.intertek.demo.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:37:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.intertek.demo.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:37:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:37:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy118] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:37:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:37:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:37:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.intertek.demo.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:37:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.intertek.demo.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:37:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:37:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy122] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:37:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.intertek.demo.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:37:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.intertek.demo.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:37:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:37:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:37:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:37:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 16:37:03 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8089 (http)
2020-08-18 16:37:03 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8089"]
2020-08-18 16:37:03 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-08-18 16:37:03 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.24]
2020-08-18 16:37:03 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/demo] Initializing Spring embedded WebApplicationContext
2020-08-18 16:37:03 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 5382 ms
2020-08-18 16:37:04 INFO  main com.intertek.demo.common.xss.XssFilter ------------ xss filter init ------------
2020-08-18 16:37:05 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-08-18 16:37:06 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)]
2020-08-18 16:37:06 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-08-18 16:37:06 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'itsAsyncThreadPool'
2020-08-18 16:37:06 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-08-18 16:37:06 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-08-18 16:37:06 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-08-18 16:37:06 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.1 created.
2020-08-18 16:37:06 INFO  main org.quartz.simpl.RAMJobStore RAMJobStore initialized.
2020-08-18 16:37:06 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.1) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-08-18 16:37:06 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-08-18 16:37:06 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.1
2020-08-18 16:37:06 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@3d7b3b18
2020-08-18 16:37:07 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-08-18 16:37:07 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-08-18 16:37:07 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-08-18 16:37:07 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-08-18 16:37:07 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-08-18 16:37:07 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: deleteLogssUsingGET_1
2020-08-18 16:37:07 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-08-18 16:37:07 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-08-18 16:37:07 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-08-18 16:37:07 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-08-18 16:37:07 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-08-18 16:37:07 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now
2020-08-18 16:37:07 INFO  main org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-08-18 16:37:07 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8089"]
2020-08-18 16:37:07 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8089 (http) with context path '/demo'
2020-08-18 16:37:07 INFO  main com.intertek.demo.DemoApplication Started DemoApplication in 10.179 seconds (JVM running for 10.743)
2020-08-18 16:53:16 INFO  http-nio-8089-exec-2 org.apache.tomcat.util.http.parser.Cookie A cookie header was received [1596618278; Hm_lvt_8b02a318fde5831da10426656a43d03c=1596701463,1596780333] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-08-18 16:53:16 INFO  http-nio-8089-exec-2 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/demo] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-08-18 16:53:16 INFO  http-nio-8089-exec-2 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-08-18 16:53:16 INFO  http-nio-8089-exec-2 org.springframework.web.servlet.DispatcherServlet Completed initialization in 17 ms
2020-08-18 16:53:16 INFO  http-nio-8089-exec-2 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-08-18 16:53:17 INFO  http-nio-8089-exec-2 p6spy 2020-08-18 16:53:17 | 耗时 13 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin';
2020-08-18 16:53:17 INFO  http-nio-8089-exec-2 p6spy 2020-08-18 16:53:17 | 耗时 8 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'admin' AND m.perms IS NOT NULL AND m.perms <> '';
2020-08-18 16:53:17 INFO  http-nio-8089-exec-2 p6spy 2020-08-18 16:53:17 | 耗时 6 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.company_name_zh companyNameZh, u.company_name_en companyNameEn, u.company_address companyAddress, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-08-18 16:53:19 INFO  http-nio-8089-exec-6 p6spy 2020-08-18 16:53:19 | 耗时 0 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin';
2020-08-18 16:53:19 INFO  http-nio-8089-exec-6 p6spy 2020-08-18 16:53:19 | 耗时 0 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'admin' AND m.perms IS NOT NULL AND m.perms <> '';
2020-08-18 16:53:19 INFO  http-nio-8089-exec-6 p6spy 2020-08-18 16:53:19 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.company_name_zh companyNameZh, u.company_name_en companyNameEn, u.company_address companyAddress, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-08-18 16:53:43 INFO  http-nio-8089-exec-7 p6spy 2020-08-18 16:53:43 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin';
2020-08-18 16:53:43 INFO  http-nio-8089-exec-7 p6spy 2020-08-18 16:53:43 | 耗时 0 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'admin' AND m.perms IS NOT NULL AND m.perms <> '';
2020-08-18 16:53:43 INFO  http-nio-8089-exec-7 p6spy 2020-08-18 16:53:43 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.company_name_zh companyNameZh, u.company_name_en companyNameEn, u.company_address companyAddress, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-08-18 16:53:45 INFO  http-nio-8089-exec-5 p6spy 2020-08-18 16:53:45 | 耗时 0 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin';
2020-08-18 16:53:45 INFO  http-nio-8089-exec-5 p6spy 2020-08-18 16:53:45 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'admin' AND m.perms IS NOT NULL AND m.perms <> '';
2020-08-18 16:53:45 INFO  http-nio-8089-exec-5 p6spy 2020-08-18 16:53:45 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.company_name_zh companyNameZh, u.company_name_en companyNameEn, u.company_address companyAddress, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-08-18 17:07:10 INFO  http-nio-8089-exec-10 p6spy 2020-08-18 17:07:10 | 耗时 6 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin';
2020-08-18 17:07:10 INFO  http-nio-8089-exec-10 p6spy 2020-08-18 17:07:10 | 耗时 4 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'admin' AND m.perms IS NOT NULL AND m.perms <> '';
2020-08-18 17:07:10 INFO  http-nio-8089-exec-10 p6spy 2020-08-18 17:07:10 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.company_name_zh companyNameZh, u.company_name_en companyNameEn, u.company_address companyAddress, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-08-18 17:07:11 INFO  http-nio-8089-exec-7 p6spy 2020-08-18 17:07:11 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin') ORDER BY m.order_num;
2020-08-18 17:07:11 INFO  http-nio-8089-exec-1 p6spy 2020-08-18 17:07:11 | 耗时 0 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin';
2020-08-18 17:07:11 INFO  http-nio-8089-exec-1 p6spy 2020-08-18 17:07:11 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'admin' AND m.perms IS NOT NULL AND m.perms <> '';
2020-08-18 17:07:12 INFO  http-nio-8089-exec-4 p6spy 2020-08-18 17:07:12 | 耗时 3 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-08-18T17:07:12.289+0800' WHERE USERNAME = 'admin';
2020-08-18 17:07:12 INFO  http-nio-8089-exec-4 p6spy 2020-08-18 17:07:12 | 耗时 4 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-08-18 17:07:12 INFO  http-nio-8089-exec-4 p6spy 2020-08-18 17:07:12 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-08-18 17:07:12 INFO  http-nio-8089-exec-4 p6spy 2020-08-18 17:07:12 | 耗时 2 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-08-18 17:07:12 INFO  http-nio-8089-exec-4 p6spy 2020-08-18 17:07:12 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-08-18 17:07:12 INFO  http-nio-8089-exec-4 p6spy 2020-08-18 17:07:12 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'admin' GROUP BY days;
2020-08-18 17:07:13 INFO  http-nio-8089-exec-5 p6spy 2020-08-18 17:07:13 | 耗时 0 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin';
2020-08-18 17:07:13 INFO  http-nio-8089-exec-5 p6spy 2020-08-18 17:07:13 | 耗时 0 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'admin' AND m.perms IS NOT NULL AND m.perms <> '';
2020-08-18 17:07:13 INFO  http-nio-8089-exec-5 p6spy 2020-08-18 17:07:13 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.company_name_zh companyNameZh, u.company_name_en companyNameEn, u.company_address companyAddress, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-08-18 17:07:14 INFO  http-nio-8089-exec-2 p6spy 2020-08-18 17:07:14 | 耗时 1 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin') ORDER BY m.order_num;
2020-08-18 17:07:14 INFO  http-nio-8089-exec-3 p6spy 2020-08-18 17:07:14 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-08-18T17:07:14.122+0800' WHERE USERNAME = 'admin';
2020-08-18 17:07:14 INFO  http-nio-8089-exec-3 p6spy 2020-08-18 17:07:14 | 耗时 0 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-08-18 17:07:14 INFO  http-nio-8089-exec-3 p6spy 2020-08-18 17:07:14 | 耗时 0 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-08-18 17:07:14 INFO  http-nio-8089-exec-3 p6spy 2020-08-18 17:07:14 | 耗时 0 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-08-18 17:07:14 INFO  http-nio-8089-exec-3 p6spy 2020-08-18 17:07:14 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-08-18 17:07:14 INFO  http-nio-8089-exec-3 p6spy 2020-08-18 17:07:14 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'admin' GROUP BY days;
2020-08-18 17:07:17 INFO  http-nio-8089-exec-5 p6spy 2020-08-18 17:07:17 | 耗时 3 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-08-18 17:07:17 INFO  http-nio-8089-exec-4 p6spy 2020-08-18 17:07:17 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.company_name_zh companyNameZh, u.company_name_en companyNameEn, u.company_address companyAddress, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM (SELECT * FROM t_user tu WHERE tu.user_id) u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ) TOTAL;
2020-08-18 17:07:17 INFO  http-nio-8089-exec-4 p6spy 2020-08-18 17:07:17 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.company_name_zh companyNameZh, u.company_name_en companyNameEn, u.company_address companyAddress, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM (SELECT * FROM t_user tu WHERE tu.user_id) u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ORDER BY userId ASC LIMIT 0,10;
2020-08-18 17:07:18 INFO  http-nio-8089-exec-9 p6spy 2020-08-18 17:07:18 | 耗时 3 ms | SQL 语句：
SELECT MENU_ID, PARENT_ID, MENU_NAME, URL, PERMS, ICON, TYPE, ORDER_NUM, CREATE_ID, CREATE_TIME, MODIFY_ID, MODIFY_TIME FROM t_menu;
2020-08-18 17:07:18 INFO  http-nio-8089-exec-10 p6spy 2020-08-18 17:07:18 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT r.role_id roleId, r.role_name roleName, r.remark, r.create_time createTime, r.modify_time modifyTime, GROUP_CONCAT(rm.menu_id) menuIds FROM t_role r LEFT JOIN t_role_menu rm ON (r.role_id = rm.role_id) WHERE 1 = 1 GROUP BY r.role_id ) TOTAL;
2020-08-18 17:07:18 INFO  http-nio-8089-exec-10 p6spy 2020-08-18 17:07:18 | 耗时 4 ms | SQL 语句：
SELECT r.role_id roleId, r.role_name roleName, r.remark, r.create_time createTime, r.modify_time modifyTime, GROUP_CONCAT(rm.menu_id) menuIds FROM t_role r LEFT JOIN t_role_menu rm ON (r.role_id = rm.role_id) WHERE 1 = 1 GROUP BY r.role_id ORDER BY createTime DESC LIMIT 0,10;
2020-08-18 17:07:19 INFO  http-nio-8089-exec-2 p6spy 2020-08-18 17:07:19 | 耗时 0 ms | SQL 语句：
SELECT MENU_ID, PARENT_ID, MENU_NAME, URL, PERMS, ICON, TYPE, ORDER_NUM, CREATE_ID, CREATE_TIME, MODIFY_ID, MODIFY_TIME FROM t_menu;
2020-08-18 17:07:38 INFO  main com.intertek.demo.DemoApplication Starting DemoApplication on CCHNSHZL0211 with PID 30312 (D:\IdeaWorkspace\demo\target\classes started by barry.jt.huang in D:\IdeaWorkspace\demo)
2020-08-18 17:07:38 INFO  main com.intertek.demo.DemoApplication The following profiles are active: local
2020-08-18 17:07:39 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-08-18 17:07:39 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data repositories in DEFAULT mode.
2020-08-18 17:07:39 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 73ms. Found 0 repository interfaces.
2020-08-18 17:07:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 17:07:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$34cafbb1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 17:07:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 17:07:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 17:07:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$cb3c8ae0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 17:07:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'itsProperties' of type [com.intertek.demo.common.properties.ItsProperties$$EnhancerBySpringCGLIB$$2e6e9020] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 17:07:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.intertek.demo.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$db6e079d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 17:07:41 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 17:07:41 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.intertek.demo.common.configure.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$dd300221] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 17:07:41 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 17:07:41 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$904f77a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 17:07:41 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 17:07:41 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 17:07:41 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource 动态数据源-检测到并开启了p6spy
2020-08-18 17:07:41 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-08-18 17:07:41 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-08-18 17:07:41 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource 初始共加载 1 个数据源
2020-08-18 17:07:41 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource 动态数据源-加载 base 成功
2020-08-18 17:07:41 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource 当前的默认数据源是单数据源，数据源名为 base
2020-08-18 17:07:41 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 17:07:41 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 17:07:41 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 17:07:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 17:07:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 17:07:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 17:07:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy113] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 17:07:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 17:07:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 17:07:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.intertek.demo.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 17:07:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.intertek.demo.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 17:07:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 17:07:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy118] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 17:07:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 17:07:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 17:07:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.intertek.demo.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 17:07:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.intertek.demo.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 17:07:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 17:07:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy122] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 17:07:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.intertek.demo.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 17:07:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.intertek.demo.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 17:07:43 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 17:07:43 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 17:07:43 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 17:07:43 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 17:07:43 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8089 (http)
2020-08-18 17:07:43 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8089"]
2020-08-18 17:07:43 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-08-18 17:07:43 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.24]
2020-08-18 17:07:44 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/demo] Initializing Spring embedded WebApplicationContext
2020-08-18 17:07:44 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 6092 ms
2020-08-18 17:07:44 INFO  main com.intertek.demo.common.xss.XssFilter ------------ xss filter init ------------
2020-08-18 17:07:46 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-08-18 17:07:46 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)]
2020-08-18 17:07:46 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-08-18 17:07:46 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'itsAsyncThreadPool'
2020-08-18 17:07:46 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-08-18 17:07:47 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-08-18 17:07:47 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-08-18 17:07:47 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.1 created.
2020-08-18 17:07:47 INFO  main org.quartz.simpl.RAMJobStore RAMJobStore initialized.
2020-08-18 17:07:47 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.1) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-08-18 17:07:47 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-08-18 17:07:47 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.1
2020-08-18 17:07:47 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@2e6b379c
2020-08-18 17:07:47 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-08-18 17:07:47 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-08-18 17:07:47 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-08-18 17:07:47 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-08-18 17:07:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-08-18 17:07:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: deleteLogssUsingGET_1
2020-08-18 17:07:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-08-18 17:07:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-08-18 17:07:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-08-18 17:07:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-08-18 17:07:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-08-18 17:07:48 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now
2020-08-18 17:07:48 INFO  main org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-08-18 17:07:48 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8089"]
2020-08-18 17:07:48 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8089 (http) with context path '/demo'
2020-08-18 17:07:48 INFO  main com.intertek.demo.DemoApplication Started DemoApplication in 11.079 seconds (JVM running for 11.624)
2020-08-18 17:09:04 INFO  http-nio-8089-exec-2 org.apache.tomcat.util.http.parser.Cookie A cookie header was received [1596618278; Hm_lvt_8b02a318fde5831da10426656a43d03c=1596701463,1596780333] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-08-18 17:09:04 INFO  http-nio-8089-exec-2 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/demo] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-08-18 17:09:04 INFO  http-nio-8089-exec-2 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-08-18 17:09:04 INFO  http-nio-8089-exec-2 org.springframework.web.servlet.DispatcherServlet Completed initialization in 10 ms
2020-08-18 17:09:04 INFO  http-nio-8089-exec-2 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-08-18 17:09:05 INFO  http-nio-8089-exec-2 p6spy 2020-08-18 17:09:05 | 耗时 7 ms | SQL 语句：
DELETE FROM t_menu WHERE MENU_ID IN ('285', '289');
2020-08-18 17:09:05 INFO  http-nio-8089-exec-2 p6spy 2020-08-18 17:09:05 | 耗时 1 ms | SQL 语句：
SELECT MENU_ID, PARENT_ID, MENU_NAME, URL, PERMS, ICON, TYPE, ORDER_NUM, CREATE_ID, CREATE_TIME, MODIFY_ID, MODIFY_TIME FROM t_menu WHERE PARENT_ID IN ('285', '289');
2020-08-18 17:09:05 INFO  http-nio-8089-exec-2 p6spy 2020-08-18 17:09:05 | 耗时 0 ms | SQL 语句：
DELETE FROM t_menu WHERE MENU_ID IN ('286', '287', '288', '290');
2020-08-18 17:09:05 INFO  http-nio-8089-exec-2 p6spy 2020-08-18 17:09:05 | 耗时 0 ms | SQL 语句：
SELECT MENU_ID, PARENT_ID, MENU_NAME, URL, PERMS, ICON, TYPE, ORDER_NUM, CREATE_ID, CREATE_TIME, MODIFY_ID, MODIFY_TIME FROM t_menu WHERE PARENT_ID IN ('286', '287', '288', '290');
2020-08-18 17:09:05 INFO  Its-Async-Thread1 p6spy 2020-08-18 17:09:05 | 耗时 5 ms | SQL 语句：
INSERT INTO t_log (USERNAME, OPERATION, TIME, METHOD, PARAMS, IP, CREATE_TIME, LOCATION) VALUES ('admin', '删除菜单/按钮', 244, 'com.intertek.demo.system.controller.MenuController.deleteMenus()', ' menuIds: "285,289"', '127.0.0.1', '2020-08-18T17:09:05.426+0800', '内网IP|0|0|内网IP|内网IP');
2020-08-18 17:09:05 INFO  http-nio-8089-exec-1 p6spy 2020-08-18 17:09:05 | 耗时 0 ms | SQL 语句：
SELECT MENU_ID, PARENT_ID, MENU_NAME, URL, PERMS, ICON, TYPE, ORDER_NUM, CREATE_ID, CREATE_TIME, MODIFY_ID, MODIFY_TIME FROM t_menu;
2020-08-18 17:09:09 INFO  http-nio-8089-exec-3 p6spy 2020-08-18 17:09:09 | 耗时 6 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin';
2020-08-18 17:09:09 INFO  http-nio-8089-exec-3 p6spy 2020-08-18 17:09:09 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'admin' AND m.perms IS NOT NULL AND m.perms <> '';
2020-08-18 17:09:09 INFO  http-nio-8089-exec-3 p6spy 2020-08-18 17:09:09 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.company_name_zh companyNameZh, u.company_name_en companyNameEn, u.company_address companyAddress, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-08-18 17:09:10 INFO  http-nio-8089-exec-8 p6spy 2020-08-18 17:09:10 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin';
2020-08-18 17:09:10 INFO  http-nio-8089-exec-8 p6spy 2020-08-18 17:09:10 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'admin' AND m.perms IS NOT NULL AND m.perms <> '';
2020-08-18 17:09:10 INFO  http-nio-8089-exec-7 p6spy 2020-08-18 17:09:10 | 耗时 23 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin') ORDER BY m.order_num;
2020-08-18 17:09:10 INFO  http-nio-8089-exec-10 p6spy 2020-08-18 17:09:10 | 耗时 0 ms | SQL 语句：
SELECT MENU_ID, PARENT_ID, MENU_NAME, URL, PERMS, ICON, TYPE, ORDER_NUM, CREATE_ID, CREATE_TIME, MODIFY_ID, MODIFY_TIME FROM t_menu;
2020-08-18 17:09:16 INFO  http-nio-8089-exec-2 p6spy 2020-08-18 17:09:16 | 耗时 1 ms | SQL 语句：
DELETE FROM t_menu WHERE MENU_ID IN ('277', '281');
2020-08-18 17:09:16 INFO  http-nio-8089-exec-2 p6spy 2020-08-18 17:09:16 | 耗时 0 ms | SQL 语句：
SELECT MENU_ID, PARENT_ID, MENU_NAME, URL, PERMS, ICON, TYPE, ORDER_NUM, CREATE_ID, CREATE_TIME, MODIFY_ID, MODIFY_TIME FROM t_menu WHERE PARENT_ID IN ('277', '281');
2020-08-18 17:09:16 INFO  http-nio-8089-exec-2 p6spy 2020-08-18 17:09:16 | 耗时 2 ms | SQL 语句：
DELETE FROM t_menu WHERE MENU_ID IN ('278', '279', '280', '282', '283', '284');
2020-08-18 17:09:16 INFO  http-nio-8089-exec-2 p6spy 2020-08-18 17:09:16 | 耗时 0 ms | SQL 语句：
SELECT MENU_ID, PARENT_ID, MENU_NAME, URL, PERMS, ICON, TYPE, ORDER_NUM, CREATE_ID, CREATE_TIME, MODIFY_ID, MODIFY_TIME FROM t_menu WHERE PARENT_ID IN ('278', '279', '280', '282', '283', '284');
2020-08-18 17:09:16 INFO  Its-Async-Thread2 p6spy 2020-08-18 17:09:16 | 耗时 2 ms | SQL 语句：
INSERT INTO t_log (USERNAME, OPERATION, TIME, METHOD, PARAMS, IP, CREATE_TIME, LOCATION) VALUES ('admin', '删除菜单/按钮', 27, 'com.intertek.demo.system.controller.MenuController.deleteMenus()', ' menuIds: "277,281"', '127.0.0.1', '2020-08-18T17:09:16.174+0800', '内网IP|0|0|内网IP|内网IP');
2020-08-18 17:09:16 INFO  http-nio-8089-exec-1 p6spy 2020-08-18 17:09:16 | 耗时 0 ms | SQL 语句：
SELECT MENU_ID, PARENT_ID, MENU_NAME, URL, PERMS, ICON, TYPE, ORDER_NUM, CREATE_ID, CREATE_TIME, MODIFY_ID, MODIFY_TIME FROM t_menu;
2020-08-18 17:09:16 INFO  http-nio-8089-exec-3 p6spy 2020-08-18 17:09:16 | 耗时 0 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin';
2020-08-18 17:09:16 INFO  http-nio-8089-exec-3 p6spy 2020-08-18 17:09:16 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'admin' AND m.perms IS NOT NULL AND m.perms <> '';
2020-08-18 17:09:16 INFO  http-nio-8089-exec-3 p6spy 2020-08-18 17:09:16 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.company_name_zh companyNameZh, u.company_name_en companyNameEn, u.company_address companyAddress, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-08-18 17:09:16 INFO  http-nio-8089-exec-7 p6spy 2020-08-18 17:09:16 | 耗时 0 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin';
2020-08-18 17:09:16 INFO  http-nio-8089-exec-7 p6spy 2020-08-18 17:09:16 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'admin' AND m.perms IS NOT NULL AND m.perms <> '';
2020-08-18 17:09:16 INFO  http-nio-8089-exec-8 p6spy 2020-08-18 17:09:16 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin') ORDER BY m.order_num;
2020-08-18 17:09:17 INFO  http-nio-8089-exec-10 p6spy 2020-08-18 17:09:17 | 耗时 0 ms | SQL 语句：
SELECT MENU_ID, PARENT_ID, MENU_NAME, URL, PERMS, ICON, TYPE, ORDER_NUM, CREATE_ID, CREATE_TIME, MODIFY_ID, MODIFY_TIME FROM t_menu;
2020-08-18 17:09:27 INFO  http-nio-8089-exec-6 p6spy 2020-08-18 17:09:27 | 耗时 7 ms | SQL 语句：
SELECT ID, author, base_package, entity_package, mapper_package, mapper_xml_package, service_package, service_impl_package, controller_package, is_trim, trim_value FROM t_generator_config;
2020-08-18 17:09:32 INFO  http-nio-8089-exec-8 p6spy 2020-08-18 17:09:32 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM information_schema.TABLES WHERE TABLE_SCHEMA = 'demo';
2020-08-18 17:09:32 INFO  http-nio-8089-exec-8 p6spy 2020-08-18 17:09:32 | 耗时 3 ms | SQL 语句：
SELECT CREATE_TIME createTime, UPDATE_TIME updateTime, TABLE_ROWS dataRows, TABLE_NAME name, TABLE_COMMENT remark FROM information_schema.TABLES WHERE TABLE_SCHEMA = 'demo' ORDER BY createTime ASC LIMIT 0,10;
2020-08-18 17:09:40 INFO  http-nio-8089-exec-2 p6spy 2020-08-18 17:09:40 | 耗时 6 ms | SQL 语句：
SELECT COUNT(1) FROM t_log;
2020-08-18 17:09:40 INFO  http-nio-8089-exec-2 p6spy 2020-08-18 17:09:40 | 耗时 0 ms | SQL 语句：
SELECT ID, USERNAME, OPERATION, TIME, METHOD, PARAMS, IP, CREATE_TIME, LOCATION FROM t_log ORDER BY create_time DESC LIMIT 0,10;
2020-08-18 17:09:42 INFO  http-nio-8089-exec-3 p6spy 2020-08-18 17:09:42 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_login_log;
2020-08-18 17:09:42 INFO  http-nio-8089-exec-3 p6spy 2020-08-18 17:09:42 | 耗时 1 ms | SQL 语句：
SELECT ID, USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER FROM t_login_log ORDER BY login_time DESC LIMIT 0,10;
2020-08-18 17:09:48 INFO  http-nio-8089-exec-10 p6spy 2020-08-18 17:09:48 | 耗时 5 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-08-18 17:09:48 INFO  http-nio-8089-exec-9 p6spy 2020-08-18 17:09:48 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.company_name_zh companyNameZh, u.company_name_en companyNameEn, u.company_address companyAddress, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM (SELECT * FROM t_user tu WHERE tu.user_id) u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ) TOTAL;
2020-08-18 17:09:48 INFO  http-nio-8089-exec-9 p6spy 2020-08-18 17:09:48 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.company_name_zh companyNameZh, u.company_name_en companyNameEn, u.company_address companyAddress, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM (SELECT * FROM t_user tu WHERE tu.user_id) u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ORDER BY userId ASC LIMIT 0,10;
2020-08-18 17:09:49 INFO  http-nio-8089-exec-3 p6spy 2020-08-18 17:09:49 | 耗时 1 ms | SQL 语句：
SELECT MENU_ID, PARENT_ID, MENU_NAME, URL, PERMS, ICON, TYPE, ORDER_NUM, CREATE_ID, CREATE_TIME, MODIFY_ID, MODIFY_TIME FROM t_menu;
2020-08-18 17:09:49 INFO  http-nio-8089-exec-1 p6spy 2020-08-18 17:09:49 | 耗时 8 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT r.role_id roleId, r.role_name roleName, r.remark, r.create_time createTime, r.modify_time modifyTime, GROUP_CONCAT(rm.menu_id) menuIds FROM t_role r LEFT JOIN t_role_menu rm ON (r.role_id = rm.role_id) WHERE 1 = 1 GROUP BY r.role_id ) TOTAL;
2020-08-18 17:09:49 INFO  http-nio-8089-exec-1 p6spy 2020-08-18 17:09:49 | 耗时 3 ms | SQL 语句：
SELECT r.role_id roleId, r.role_name roleName, r.remark, r.create_time createTime, r.modify_time modifyTime, GROUP_CONCAT(rm.menu_id) menuIds FROM t_role r LEFT JOIN t_role_menu rm ON (r.role_id = rm.role_id) WHERE 1 = 1 GROUP BY r.role_id ORDER BY createTime DESC LIMIT 0,10;
2020-08-18 17:09:50 INFO  http-nio-8089-exec-8 p6spy 2020-08-18 17:09:50 | 耗时 0 ms | SQL 语句：
SELECT MENU_ID, PARENT_ID, MENU_NAME, URL, PERMS, ICON, TYPE, ORDER_NUM, CREATE_ID, CREATE_TIME, MODIFY_ID, MODIFY_TIME FROM t_menu;
2020-08-18 17:09:51 INFO  http-nio-8089-exec-10 p6spy 2020-08-18 17:09:51 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept ORDER BY ORDER_NUM ASC;
2020-08-18 17:09:58 INFO  http-nio-8089-exec-3 p6spy 2020-08-18 17:09:58 | 耗时 1 ms | SQL 语句：
SELECT MENU_ID, PARENT_ID, MENU_NAME, URL, PERMS, ICON, TYPE, ORDER_NUM, CREATE_ID, CREATE_TIME, MODIFY_ID, MODIFY_TIME FROM t_menu;
2020-08-18 17:09:58 INFO  http-nio-8089-exec-2 p6spy 2020-08-18 17:09:58 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT r.role_id roleId, r.role_name roleName, r.remark, r.create_time createTime, r.modify_time modifyTime, GROUP_CONCAT(rm.menu_id) menuIds FROM t_role r LEFT JOIN t_role_menu rm ON (r.role_id = rm.role_id) WHERE 1 = 1 GROUP BY r.role_id ) TOTAL;
2020-08-18 17:09:58 INFO  http-nio-8089-exec-2 p6spy 2020-08-18 17:09:58 | 耗时 1 ms | SQL 语句：
SELECT r.role_id roleId, r.role_name roleName, r.remark, r.create_time createTime, r.modify_time modifyTime, GROUP_CONCAT(rm.menu_id) menuIds FROM t_role r LEFT JOIN t_role_menu rm ON (r.role_id = rm.role_id) WHERE 1 = 1 GROUP BY r.role_id ORDER BY createTime DESC LIMIT 0,10;
2020-08-18 17:09:59 INFO  http-nio-8089-exec-6 p6spy 2020-08-18 17:09:59 | 耗时 0 ms | SQL 语句：
SELECT MENU_ID, PARENT_ID, MENU_NAME, URL, PERMS, ICON, TYPE, ORDER_NUM, CREATE_ID, CREATE_TIME, MODIFY_ID, MODIFY_TIME FROM t_menu;
2020-08-18 17:10:00 INFO  http-nio-8089-exec-8 p6spy 2020-08-18 17:10:00 | 耗时 4 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-08-18 17:10:00 INFO  http-nio-8089-exec-5 p6spy 2020-08-18 17:10:00 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.company_name_zh companyNameZh, u.company_name_en companyNameEn, u.company_address companyAddress, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM (SELECT * FROM t_user tu WHERE tu.user_id) u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ) TOTAL;
2020-08-18 17:10:00 INFO  http-nio-8089-exec-5 p6spy 2020-08-18 17:10:00 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.company_name_zh companyNameZh, u.company_name_en companyNameEn, u.company_address companyAddress, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM (SELECT * FROM t_user tu WHERE tu.user_id) u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ORDER BY userId ASC LIMIT 0,10;
2020-08-18 17:10:40 INFO  http-nio-8089-exec-9 p6spy 2020-08-18 17:10:40 | 耗时 0 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin';
2020-08-18 17:10:40 INFO  http-nio-8089-exec-9 p6spy 2020-08-18 17:10:40 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'admin' AND m.perms IS NOT NULL AND m.perms <> '';
2020-08-18 17:10:40 INFO  http-nio-8089-exec-9 p6spy 2020-08-18 17:10:40 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.company_name_zh companyNameZh, u.company_name_en companyNameEn, u.company_address companyAddress, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-08-18 17:10:41 INFO  http-nio-8089-exec-1 p6spy 2020-08-18 17:10:41 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin') ORDER BY m.order_num;
2020-08-18 17:10:41 INFO  http-nio-8089-exec-4 p6spy 2020-08-18 17:10:41 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-08-18T17:10:41.412+0800' WHERE USERNAME = 'admin';
2020-08-18 17:10:41 INFO  http-nio-8089-exec-4 p6spy 2020-08-18 17:10:41 | 耗时 2 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-08-18 17:10:41 INFO  http-nio-8089-exec-4 p6spy 2020-08-18 17:10:41 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-08-18 17:10:41 INFO  http-nio-8089-exec-4 p6spy 2020-08-18 17:10:41 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-08-18 17:10:41 INFO  http-nio-8089-exec-4 p6spy 2020-08-18 17:10:41 | 耗时 0 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-08-18 17:10:41 INFO  http-nio-8089-exec-4 p6spy 2020-08-18 17:10:41 | 耗时 2 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'admin' GROUP BY days;
2020-08-18 17:10:43 INFO  http-nio-8089-exec-7 p6spy 2020-08-18 17:10:43 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.company_name_zh companyNameZh, u.company_name_en companyNameEn, u.company_address companyAddress, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM (SELECT * FROM t_user tu WHERE tu.user_id) u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ) TOTAL;
2020-08-18 17:10:43 INFO  http-nio-8089-exec-10 p6spy 2020-08-18 17:10:43 | 耗时 0 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-08-18 17:10:43 INFO  http-nio-8089-exec-7 p6spy 2020-08-18 17:10:43 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.company_name_zh companyNameZh, u.company_name_en companyNameEn, u.company_address companyAddress, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM (SELECT * FROM t_user tu WHERE tu.user_id) u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ORDER BY userId ASC LIMIT 0,10;
2020-08-18 17:11:50 INFO  http-nio-8089-exec-2 p6spy 2020-08-18 17:11:50 | 耗时 0 ms | SQL 语句：
DELETE FROM t_user WHERE USER_ID IN ('19', '20', '21');
2020-08-18 17:11:50 INFO  http-nio-8089-exec-2 p6spy 2020-08-18 17:11:50 | 耗时 0 ms | SQL 语句：
DELETE FROM t_user_role WHERE USER_ID IN ('19', '20', '21');
2020-08-18 17:11:50 INFO  Its-Async-Thread3 p6spy 2020-08-18 17:11:50 | 耗时 1 ms | SQL 语句：
INSERT INTO t_log (USERNAME, OPERATION, TIME, METHOD, PARAMS, IP, CREATE_TIME, LOCATION) VALUES ('admin', '删除用户', 24, 'com.intertek.demo.system.controller.UserController.deleteUsers()', ' userIds: "19,20,21"', '127.0.0.1', '2020-08-18T17:11:50.691+0800', '内网IP|0|0|内网IP|内网IP');
2020-08-18 17:11:50 INFO  http-nio-8089-exec-1 p6spy 2020-08-18 17:11:50 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.company_name_zh companyNameZh, u.company_name_en companyNameEn, u.company_address companyAddress, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM (SELECT * FROM t_user tu WHERE tu.user_id) u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ) TOTAL;
2020-08-18 17:11:50 INFO  http-nio-8089-exec-1 p6spy 2020-08-18 17:11:50 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.company_name_zh companyNameZh, u.company_name_en companyNameEn, u.company_address companyAddress, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM (SELECT * FROM t_user tu WHERE tu.user_id) u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ORDER BY userId ASC LIMIT 0,10;
2020-08-18 17:12:00 INFO  http-nio-8089-exec-6 p6spy 2020-08-18 17:12:00 | 耗时 1 ms | SQL 语句：
DELETE FROM t_user WHERE USER_ID IN ('12', '13', '14', '15', '18', '24', '25', '26');
2020-08-18 17:12:00 INFO  http-nio-8089-exec-6 p6spy 2020-08-18 17:12:00 | 耗时 0 ms | SQL 语句：
DELETE FROM t_user_role WHERE USER_ID IN ('12', '13', '14', '15', '18', '24', '25', '26');
2020-08-18 17:12:00 INFO  Its-Async-Thread4 p6spy 2020-08-18 17:12:00 | 耗时 3 ms | SQL 语句：
INSERT INTO t_log (USERNAME, OPERATION, TIME, METHOD, PARAMS, IP, CREATE_TIME, LOCATION) VALUES ('admin', '删除用户', 17, 'com.intertek.demo.system.controller.UserController.deleteUsers()', ' userIds: "12,13,14,15,18,24,25,26"', '127.0.0.1', '2020-08-18T17:12:00.438+0800', '内网IP|0|0|内网IP|内网IP');
2020-08-18 17:12:00 INFO  http-nio-8089-exec-4 p6spy 2020-08-18 17:12:00 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.company_name_zh companyNameZh, u.company_name_en companyNameEn, u.company_address companyAddress, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM (SELECT * FROM t_user tu WHERE tu.user_id) u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ) TOTAL;
2020-08-18 17:12:00 INFO  http-nio-8089-exec-4 p6spy 2020-08-18 17:12:00 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.company_name_zh companyNameZh, u.company_name_en companyNameEn, u.company_address companyAddress, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM (SELECT * FROM t_user tu WHERE tu.user_id) u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ORDER BY userId ASC LIMIT 0,10;
2020-08-18 17:12:07 INFO  http-nio-8089-exec-8 p6spy 2020-08-18 17:12:07 | 耗时 1 ms | SQL 语句：
DELETE FROM t_user WHERE USER_ID IN ('1', '27', '28', '30');
2020-08-18 17:12:07 INFO  http-nio-8089-exec-8 p6spy 2020-08-18 17:12:07 | 耗时 0 ms | SQL 语句：
DELETE FROM t_user_role WHERE USER_ID IN ('1', '27', '28', '30');
2020-08-18 17:12:07 INFO  Its-Async-Thread5 p6spy 2020-08-18 17:12:07 | 耗时 3 ms | SQL 语句：
INSERT INTO t_log (USERNAME, OPERATION, TIME, METHOD, PARAMS, IP, CREATE_TIME, LOCATION) VALUES ('admin', '删除用户', 11, 'com.intertek.demo.system.controller.UserController.deleteUsers()', ' userIds: "1,27,28,30"', '127.0.0.1', '2020-08-18T17:12:07.653+0800', '内网IP|0|0|内网IP|内网IP');
2020-08-18 17:12:07 INFO  http-nio-8089-exec-5 p6spy 2020-08-18 17:12:07 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.company_name_zh companyNameZh, u.company_name_en companyNameEn, u.company_address companyAddress, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM (SELECT * FROM t_user tu WHERE tu.user_id) u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ) TOTAL;
2020-08-18 17:12:07 INFO  http-nio-8089-exec-5 p6spy 2020-08-18 17:12:07 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.company_name_zh companyNameZh, u.company_name_en companyNameEn, u.company_address companyAddress, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM (SELECT * FROM t_user tu WHERE tu.user_id) u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ORDER BY userId ASC LIMIT 0,10;
2020-08-18 17:12:09 INFO  http-nio-8089-exec-7 p6spy 2020-08-18 17:12:09 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT r.role_id roleId, r.role_name roleName, r.remark, r.create_time createTime, r.modify_time modifyTime, GROUP_CONCAT(rm.menu_id) menuIds FROM t_role r LEFT JOIN t_role_menu rm ON (r.role_id = rm.role_id) WHERE 1 = 1 GROUP BY r.role_id ) TOTAL;
2020-08-18 17:12:09 INFO  http-nio-8089-exec-9 p6spy 2020-08-18 17:12:09 | 耗时 0 ms | SQL 语句：
SELECT MENU_ID, PARENT_ID, MENU_NAME, URL, PERMS, ICON, TYPE, ORDER_NUM, CREATE_ID, CREATE_TIME, MODIFY_ID, MODIFY_TIME FROM t_menu;
2020-08-18 17:12:09 INFO  http-nio-8089-exec-7 p6spy 2020-08-18 17:12:09 | 耗时 2 ms | SQL 语句：
SELECT r.role_id roleId, r.role_name roleName, r.remark, r.create_time createTime, r.modify_time modifyTime, GROUP_CONCAT(rm.menu_id) menuIds FROM t_role r LEFT JOIN t_role_menu rm ON (r.role_id = rm.role_id) WHERE 1 = 1 GROUP BY r.role_id ORDER BY createTime DESC LIMIT 0,10;
2020-08-18 17:12:14 INFO  http-nio-8089-exec-3 p6spy 2020-08-18 17:12:14 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT r.role_id roleId, r.role_name roleName, r.remark, r.create_time createTime, r.modify_time modifyTime, GROUP_CONCAT(rm.menu_id) menuIds FROM t_role r LEFT JOIN t_role_menu rm ON (r.role_id = rm.role_id) WHERE 1 = 1 GROUP BY r.role_id ) TOTAL;
2020-08-18 17:12:14 INFO  http-nio-8089-exec-3 p6spy 2020-08-18 17:12:14 | 耗时 1 ms | SQL 语句：
SELECT r.role_id roleId, r.role_name roleName, r.remark, r.create_time createTime, r.modify_time modifyTime, GROUP_CONCAT(rm.menu_id) menuIds FROM t_role r LEFT JOIN t_role_menu rm ON (r.role_id = rm.role_id) WHERE 1 = 1 GROUP BY r.role_id ORDER BY createTime DESC LIMIT 10,10;
2020-08-18 17:12:15 INFO  http-nio-8089-exec-2 p6spy 2020-08-18 17:12:15 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT r.role_id roleId, r.role_name roleName, r.remark, r.create_time createTime, r.modify_time modifyTime, GROUP_CONCAT(rm.menu_id) menuIds FROM t_role r LEFT JOIN t_role_menu rm ON (r.role_id = rm.role_id) WHERE 1 = 1 GROUP BY r.role_id ) TOTAL;
2020-08-18 17:12:15 INFO  http-nio-8089-exec-2 p6spy 2020-08-18 17:12:15 | 耗时 1 ms | SQL 语句：
SELECT r.role_id roleId, r.role_name roleName, r.remark, r.create_time createTime, r.modify_time modifyTime, GROUP_CONCAT(rm.menu_id) menuIds FROM t_role r LEFT JOIN t_role_menu rm ON (r.role_id = rm.role_id) WHERE 1 = 1 GROUP BY r.role_id ORDER BY createTime DESC LIMIT 0,10;
2020-08-18 17:12:17 INFO  http-nio-8089-exec-6 p6spy 2020-08-18 17:12:17 | 耗时 0 ms | SQL 语句：
SELECT MENU_ID, PARENT_ID, MENU_NAME, URL, PERMS, ICON, TYPE, ORDER_NUM, CREATE_ID, CREATE_TIME, MODIFY_ID, MODIFY_TIME FROM t_menu;
2020-08-18 17:12:18 INFO  http-nio-8089-exec-8 p6spy 2020-08-18 17:12:18 | 耗时 0 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept ORDER BY ORDER_NUM ASC;
2020-08-18 23:04:38 INFO  main com.intertek.demo.DemoApplication Starting DemoApplication on WIN-0F44EC9N833 with PID 11408 (D:\MyEclipse2017\demo\target\classes started by Administrator in D:\MyEclipse2017\demo)
2020-08-18 23:04:38 INFO  main com.intertek.demo.DemoApplication The following profiles are active: local
2020-08-18 23:04:41 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-08-18 23:04:41 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data repositories in DEFAULT mode.
2020-08-18 23:04:41 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 52ms. Found 0 repository interfaces.
2020-08-18 23:04:44 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:04:44 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$c5c90b4a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:04:44 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:04:44 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:04:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$5c3a9a79] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:04:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'itsProperties' of type [com.intertek.demo.common.properties.ItsProperties$$EnhancerBySpringCGLIB$$bf6c9fb9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:04:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.intertek.demo.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$6c6c1736] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:04:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:04:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.intertek.demo.common.configure.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$6e2e11ba] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:04:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:04:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$9a030713] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:04:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:04:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:04:45 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource 动态数据源-检测到并开启了p6spy
2020-08-18 23:04:45 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-08-18 23:04:47 INFO  main org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-08-18 23:05:58 INFO  main com.intertek.demo.DemoApplication Starting DemoApplication on WIN-0F44EC9N833 with PID 9852 (D:\MyEclipse2017\demo\target\classes started by Administrator in D:\MyEclipse2017\demo)
2020-08-18 23:05:58 INFO  main com.intertek.demo.DemoApplication The following profiles are active: local
2020-08-18 23:06:00 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-08-18 23:06:00 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data repositories in DEFAULT mode.
2020-08-18 23:06:00 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 71ms. Found 0 repository interfaces.
2020-08-18 23:06:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:06:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$3efa6208] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:06:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:06:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:06:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$d56bf137] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:06:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'itsProperties' of type [com.intertek.demo.common.properties.ItsProperties$$EnhancerBySpringCGLIB$$389df677] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:06:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.intertek.demo.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$e59d6df4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:06:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:06:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.intertek.demo.common.configure.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$e75f6878] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:06:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:06:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$13345dd1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:06:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:06:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:06:01 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource 动态数据源-检测到并开启了p6spy
2020-08-18 23:06:01 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-08-18 23:06:04 INFO  main org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-08-18 23:07:56 INFO  main com.intertek.demo.DemoApplication Starting DemoApplication on WIN-0F44EC9N833 with PID 208 (D:\MyEclipse2017\demo\target\classes started by Administrator in D:\MyEclipse2017\demo)
2020-08-18 23:07:56 INFO  main com.intertek.demo.DemoApplication The following profiles are active: local
2020-08-18 23:07:58 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-08-18 23:07:58 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data repositories in DEFAULT mode.
2020-08-18 23:07:58 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 56ms. Found 0 repository interfaces.
2020-08-18 23:07:59 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:07:59 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$37743433] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:07:59 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:07:59 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:07:59 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$cde5c362] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:07:59 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'itsProperties' of type [com.intertek.demo.common.properties.ItsProperties$$EnhancerBySpringCGLIB$$3117c8a2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:07:59 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.intertek.demo.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$de17401f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:07:59 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:07:59 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.intertek.demo.common.configure.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$dfd93aa3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:07:59 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:07:59 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$bae2ffc] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:07:59 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:07:59 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:07:59 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource 动态数据源-检测到并开启了p6spy
2020-08-18 23:07:59 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-08-18 23:08:03 INFO  main org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-08-18 23:09:42 INFO  main com.intertek.demo.DemoApplication Starting DemoApplication on WIN-0F44EC9N833 with PID 12124 (D:\MyEclipse2017\demo\target\classes started by Administrator in D:\MyEclipse2017\demo)
2020-08-18 23:09:42 INFO  main com.intertek.demo.DemoApplication The following profiles are active: local
2020-08-18 23:09:44 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-08-18 23:09:44 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data repositories in DEFAULT mode.
2020-08-18 23:09:44 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 92ms. Found 0 repository interfaces.
2020-08-18 23:09:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:09:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$40d60204] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:09:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:09:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:09:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$d7479133] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:09:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'itsProperties' of type [com.intertek.demo.common.properties.ItsProperties$$EnhancerBySpringCGLIB$$3a799673] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:09:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.intertek.demo.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$e7790df0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:09:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:09:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.intertek.demo.common.configure.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$e93b0874] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:09:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:09:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$150ffdcd] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:09:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:09:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:09:46 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource 动态数据源-检测到并开启了p6spy
2020-08-18 23:09:46 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-08-18 23:09:47 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-08-18 23:09:47 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource 初始共加载 1 个数据源
2020-08-18 23:09:47 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource 动态数据源-加载 base 成功
2020-08-18 23:09:47 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource 当前的默认数据源是单数据源，数据源名为 base
2020-08-18 23:09:47 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:09:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:09:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:09:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:09:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:09:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:09:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy113] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:09:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:09:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:09:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.intertek.demo.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:09:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.intertek.demo.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:09:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:09:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy118] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:09:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:09:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:09:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.intertek.demo.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:09:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.intertek.demo.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:09:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:09:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy122] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:09:49 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.intertek.demo.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:09:49 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.intertek.demo.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:09:49 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:09:49 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:09:49 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:09:49 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-08-18 23:09:49 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8089 (http)
2020-08-18 23:09:49 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8089"]
2020-08-18 23:09:49 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-08-18 23:09:49 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.24]
2020-08-18 23:09:49 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/demo] Initializing Spring embedded WebApplicationContext
2020-08-18 23:09:49 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 7254 ms
2020-08-18 23:09:50 INFO  main com.intertek.demo.common.xss.XssFilter ------------ xss filter init ------------
2020-08-18 23:09:52 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-08-18 23:09:53 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)]
2020-08-18 23:09:53 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-08-18 23:09:53 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'itsAsyncThreadPool'
2020-08-18 23:09:53 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-08-18 23:09:54 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-08-18 23:09:54 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-08-18 23:09:54 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.1 created.
2020-08-18 23:09:54 INFO  main org.quartz.simpl.RAMJobStore RAMJobStore initialized.
2020-08-18 23:09:54 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.1) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-08-18 23:09:54 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-08-18 23:09:54 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.1
2020-08-18 23:09:54 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@24c84e65
2020-08-18 23:09:54 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-08-18 23:09:54 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-08-18 23:09:54 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-08-18 23:09:54 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-08-18 23:09:55 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-08-18 23:09:55 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: deleteLogssUsingGET_1
2020-08-18 23:09:55 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-08-18 23:09:55 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-08-18 23:09:55 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-08-18 23:09:55 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-08-18 23:09:55 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-08-18 23:09:55 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now
2020-08-18 23:09:55 INFO  main org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-08-18 23:09:55 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8089"]
2020-08-18 23:09:55 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8089 (http) with context path '/demo'
2020-08-18 23:09:55 INFO  main com.intertek.demo.DemoApplication Started DemoApplication in 13.442 seconds (JVM running for 14.038)
2020-08-18 23:11:01 INFO  http-nio-8089-exec-2 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/demo] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-08-18 23:11:01 INFO  http-nio-8089-exec-2 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-08-18 23:11:01 INFO  http-nio-8089-exec-2 org.springframework.web.servlet.DispatcherServlet Completed initialization in 15 ms
2020-08-18 23:11:01 INFO  http-nio-8089-exec-2 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-08-18 23:11:05 INFO  http-nio-8089-exec-8 p6spy 2020-08-18 23:11:05 | 耗时 30 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-08-18 23:11:11 INFO  http-nio-8089-exec-10 com.intertek.demo.common.aspect.LimitAspect IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2020-08-18 23:11:12 INFO  http-nio-8089-exec-10 p6spy 2020-08-18 23:11:12 | 耗时 108 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.company_name_zh companyNameZh, u.company_name_en companyNameEn, u.company_address companyAddress, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-08-18 23:11:12 INFO  http-nio-8089-exec-10 p6spy 2020-08-18 23:11:12 | 耗时 34 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('admin', '2020-08-18T23:11:12.378+0800', '内网IP|0|0|内网IP|内网IP', '127.0.0.1', 'Windows 10', 'Chrome 83');
2020-08-18 23:11:12 INFO  http-nio-8089-exec-3 p6spy 2020-08-18 23:11:12 | 耗时 0 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin';
2020-08-18 23:11:13 INFO  http-nio-8089-exec-3 p6spy 2020-08-18 23:11:13 | 耗时 29 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'admin' AND m.perms IS NOT NULL AND m.perms <> '';
2020-08-18 23:11:13 INFO  http-nio-8089-exec-3 p6spy 2020-08-18 23:11:13 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.company_name_zh companyNameZh, u.company_name_en companyNameEn, u.company_address companyAddress, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-08-18 23:11:16 INFO  http-nio-8089-exec-3 p6spy 2020-08-18 23:11:16 | 耗时 5 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin') ORDER BY m.order_num;
2020-08-18 23:11:16 INFO  http-nio-8089-exec-1 p6spy 2020-08-18 23:11:16 | 耗时 11 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin';
2020-08-18 23:11:16 INFO  http-nio-8089-exec-1 p6spy 2020-08-18 23:11:16 | 耗时 6 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'admin' AND m.perms IS NOT NULL AND m.perms <> '';
2020-08-18 23:11:16 INFO  http-nio-8089-exec-9 p6spy 2020-08-18 23:11:16 | 耗时 108 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-08-18T23:11:16.476+0800' WHERE USERNAME = 'admin';
2020-08-18 23:11:16 INFO  http-nio-8089-exec-9 p6spy 2020-08-18 23:11:16 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-08-18 23:11:16 INFO  http-nio-8089-exec-9 p6spy 2020-08-18 23:11:16 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-08-18 23:11:16 INFO  http-nio-8089-exec-9 p6spy 2020-08-18 23:11:16 | 耗时 16 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-08-18 23:11:16 INFO  http-nio-8089-exec-9 p6spy 2020-08-18 23:11:16 | 耗时 2 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-08-18 23:11:16 INFO  http-nio-8089-exec-9 p6spy 2020-08-18 23:11:16 | 耗时 2 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'admin' GROUP BY days;
2020-08-18 23:11:19 INFO  http-nio-8089-exec-8 p6spy 2020-08-18 23:11:19 | 耗时 61 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-08-18T23:11:19.728+0800' WHERE USERNAME = 'admin';
2020-08-18 23:11:19 INFO  http-nio-8089-exec-8 p6spy 2020-08-18 23:11:19 | 耗时 0 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-08-18 23:11:19 INFO  http-nio-8089-exec-8 p6spy 2020-08-18 23:11:19 | 耗时 0 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-08-18 23:11:19 INFO  http-nio-8089-exec-8 p6spy 2020-08-18 23:11:19 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-08-18 23:11:19 INFO  http-nio-8089-exec-8 p6spy 2020-08-18 23:11:19 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-08-18 23:11:19 INFO  http-nio-8089-exec-8 p6spy 2020-08-18 23:11:19 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'admin' GROUP BY days;
